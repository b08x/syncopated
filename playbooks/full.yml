---
- name: Run Full Playbook
  hosts: all
  become: true
  gather_facts: true
  collections:
    - b08x.llmops_dev
    - b08x.system_core
    - b08x.shell_environment
    - b08x.storage
    - b08x.development_tools
    - b08x.desktop_environment
    - b08x.media_tools

  vars:
    desktop_environment: "{{ desktop_environment | default('gnome') }}"
    custom_path:
      - "{{ lookup('env','HOME') }}/.asdf/bin"
      - "{{ lookup('env','HOME') }}/.local/bin"
      - "{{ lookup('env','HOME') }}/Utils/bin"
  environment:
    PATH: "{{ (ansible_env.PATH.split(':') + custom_path) | unique | join(':') }}"
    PKG_CONFIG_PATH: "/usr/share/pkgconfig:/usr/lib/pkgconfig:/usr/local/lib/pkgconfig"
    ZSH: "/usr/share/oh-my-zsh"
    DISPLAY: ":0"
    GROQ_API_KEY: "{{ lookup('env', 'GROQ_API_KEY') }}"
  # variables from vars_files are available starting here...
  pre_tasks:

    - name: "Generate backup timestamp suffix"
      set_fact:
        suffix: "{{ ansible_date_time.epoch }}.{{ ansible_date_time.date }}@{{ ansible_date_time.time }}~"
      tags:
        - always
  
    - name: Set distro name
      set_fact:
        ansible_distribution: "{{ distro }}"
      when: distro is defined
      tags: ["always", "testing"]

    - name: Display ansible_distribution
      debug:
        msg: |
          The host {{ inventory_hostname }} has {{ ansible_distribution }} installed,
          which belongs to the {{ ansible_os_family }} OS family
      tags: ['always']

    - name: Symlink /etc/os-release to /etc/system-release
      file:
        src: /etc/os-release
        dest: /etc/system-release
        state: link

    - name: Set admin group name
      set_fact:
        admin_group: wheel
      tags: ["always"]

    # to allow for ansible pipelining functionality
    # https://docs.ansible.com/ansible/2.4/intro_configuration.html#pipelining
    # while this requirement was removed in RHEL, many other distros leave this option enabled
    - name: Disable requiretty for user so automation can run without interruption
      lineinfile:
        dest: /etc/sudoers
        regexp: "^Defaults    requiretty"
        line: "Defaults:{{ user.name }}    !requiretty"
        backrefs: false
        backup: false
        validate: 'visudo -cf %s'
      when: user.name != 'root'
      tags: ['sudoers']

  roles:
    - name: base
      import_role: base
      tags: ["base"]

    - name: user
      import_role: user
      tags: ["user"]

    - name: zsh
      import_role: zsh
      tags: ["shell", "zsh"]

    - name: sudoers
      import_role: sudoers
      tags: ["sudoers"]

    - name: networking
      import_role: networking
      tags: ["networking"]

- name: Run Container and Virt roles
  hosts: virt
  become: true
  gather_facts: true
  collections:
    - b08x.development_tools

  roles:
    - name: ruby
      import_role: ruby
      tags: ["ruby"]

    - name: docker
      import_role: docker
      when: use_docker == True
      tags: ["docker"]

    - name: libvirt
      import_role: libvirt
      when: use_libvirt == True
      tags: ["libvirt"]

    - name: ide
      import_role: ide
      tags: ["ide"]

- name: Run Workstation roles
  hosts: workstation
  become: true
  gather_facts: true
  collections:
    - b08x.system_core
    - b08x.desktop_environment
    - b08x.development_tools
    - b08x.media_tools

  roles:

    - name: terminal
      import_role: terminal
      tags: ["terminal"]

    - name: theme
      import_role: theme
      tags: ["theme"]

    - name: i3
      import_role: i3
      when: desktop_environment == 'i3'
      tags: ["i3"]

    - name: gnome
      import_role: gnome
      when: desktop_environment == 'gnome'
      tags: ["gnome"]

    - name: barrier
      import_role: barrier
      tags: ["barrier"]

    - name: input-remapper
      import_role: input-remapper
      from: b08x.desktop_environment
      tags: ["input-remapper"]

    - name: applications
      import_role: applications
      tags: ["applications"]

    - name: obs-studio
      import_role: obs-studio
      tags: ["obs-studio"]

    - name: deadbeef
      import_role: deadbeef
      tags: ["deadbeef"]
      

- name: Run DAW roles
  hosts: daw
  become: true
  gather_facts: true
  collections:
    - b08x.system_core
    - b08x.audio_production

  roles:

    - name: tuning
      import_role: tuning
      tags: ["tunig"]

    - name: alsa
      import_role: alsa
      tags: ["alsa"]

    - name: jackd
      import_role: jackd
      tags: ["jackd"]

    - name: pulseaudio
      import_role: pulseaudio
      tags: ["pulseaudio"]

    # - name: pipewire
    #   import_role: pipewire
    #   tags: ["pipewire"]

    - name: daw
      import_role: daw
      tags: ["daw"]


  post_tasks:
    - name: Cleanup old backup files
      script: "{{ lookup('env','HOME') }}/Utils/bin/cleanup.sh"
      when: cleanup is defined
      tags: ["cleanup"]

    - block:
        - name: Reboot the host
          reboot:
            msg: "Reboot initiated by Ansible"
            connect_timeout: 5
            reboot_timeout: 300
            pre_reboot_delay: 0
            post_reboot_delay: 30
            test_command: uptime

      rescue:
        # Do not assume the inventory_hostname is resolvable and delay 10 seconds at start
        - name: Wait 600 seconds for port 22 to become open
          ansible.builtin.wait_for:
            port: 22
            host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
            delay: 10
            timeout: 600
          connection: local

      when: reboot is defined
      tags: ['reboot']


    - name: Reboot successful
      debug:
        msg: "Reboot successful"
      tags: ['reboot']
