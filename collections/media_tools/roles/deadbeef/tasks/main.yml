---

- name: Check if deadbeef is already installed
  stat:
    path: /usr/bin/deadbeef
  register: result
  ignore_errors: "{{ ansible_check_mode }}"

- name: Install Deadbeef
  package:
    name: "{{ deadbeef_packages[ansible_distribution | lower] }}"
    state: present

# - block:
#     - name: Install deadbeef
#       aur:
#         use: auto
#         name: deadbeef-git
#         state: present
#       become: False
#       when: ansible_os_family == 'Archlinux'
#
#     - name: Install deadbeef
#       dnf:
#         name: deadbeef-static
#         state: present
#         update_cache: yes
#       when: ansible_distribution == 'Fedora'
#
#   tags: ['packages']

- name: Create deadbeef config and plugin folders
  file:
    path: "{{ user.home }}/{{ item }}"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.group }}"
  loop:
    - ".config/deadbeef"
    - ".config/deadbeef/playlists"
    - ".local/lib/deadbeef"

- name: Sync deadbeef plugins
  synchronize:
    src: plugins/
    dest: "{{ user.home }}/.local/lib/deadbeef/"
    recursive: yes
    mode: push
    delete: no
    checksum: yes
    perms: no
    rsync_opts:
      - "--update"
      - "--omit-dir-times"

- name: Set deadbeef configs
  copy:
    src: "{{ item }}"
    dest: "{{ user.home }}/.config/deadbeef/{{ item }}"
    owner: "{{ user.name }}"
    group: "{{ user.group }}"
    mode: '0644'
    backup: True
  with_items:
    - config
    - dspconfig

- name: Sync deadbeef playlists
  synchronize:
    src: playlists/
    dest: "{{ user.home }}/.config/deadbeef/playlists/"
    recursive: yes
    mode: push
    delete: no
    checksum: yes
    perms: no
    rsync_opts:
      - "--update"
      - "--omit-dir-times"


# deadbeef shellexec commands
#
# shellexec_config_wip [{"command": "audacity %F", "flags": ["local", "single"], "title": "Edit/Audacity", "name": "new_cmd"},
# {"command": "mkdir -pv %D/converted && sox %F -r 48k %D/converted/%f", "flags": ["local", "single", "multiple"], "title": "Edit/Sox/Resample", "name": "sox_resample"}, {"command": "normalize-audio -m %F", "flags": ["local", "single", "multiple"], "title": "Edit/Normalize", "name": "norm_audos"}, {"command": "puddletag %D", "flags": ["local", "single"], "title": "Edit/Puddletag", "name": "puddle_tag"},
#
# {"command": "mkdir -pv %D/converted && sox %F -r 48k %D/converted/%f channels 1", "flags": ["local", "single", "multiple"], "title": "Edit/Sox/To Mono and Resample", "name": "sox_mixres"}]
#
# xterm -bg black -hold -title MakeSFZ -font 9x15 -e "mkdir -pv %D/converted && sox %F -r 48k %d/converted/%N"
