---
- name: Check if deadbeef is already installed
  ansible.builtin.stat:
    path: /usr/bin/deadbeef
  register: result
  ignore_errors: "{{ ansible_check_mode }}"

- name: Install Deadbeef for Debian/Ubuntu
  when: ansible_os_family == "Debian"
  block:
    - name: Add Deadbeef PPA (Ubuntu)
      ansible.builtin.apt_repository:
        repo: ppa:spvkgn/deadbeef
        state: present

    - name: Install Deadbeef package
      ansible.builtin.apt:
        name: "{{ deadbeef_packages.debian }}"
        state: present
        update_cache: true
      ignore_errors: "{{ ansible_check_mode }}"

- name: Install Deadbeef for Fedora
  ansible.builtin.dnf:
    name: "{{ deadbeef_packages.fedora }}"
    state: present
  when: ansible_distribution == "Fedora"

- name: Install Deadbeef for Arch Linux
  ansible.builtin.package:
    name: "{{ deadbeef_packages.archlinux }}"
    state: present
  when: ansible_distribution == "Archlinux"

- name: Install deadbeef configs
  ignore_errors: "{{ ansible_check_mode }}"
  block:
    - name: Create deadbeef config and plugin folders
      ansible.builtin.file:
        path: "{{ user.home }}/{{ __deadbeef_dir }}"
        state: directory
        owner: "{{ user.name }}"
        group: "{{ user.group }}"
        mode: '0755'
      loop:
        - ".config/deadbeef"
        - ".config/deadbeef/playlists"
        - ".local/lib/deadbeef"
      loop_control:
        loop_var: __deadbeef_dir

    - name: Sync deadbeef plugins
      ansible.posix.synchronize:
        src: plugins/
        dest: "{{ user.home }}/.local/lib/deadbeef/"
        recursive: true
        mode: push
        delete: false
        checksum: true
        perms: false
        rsync_opts:
          - "--update"
          - "--omit-dir-times"
          - --chown={{ user.name }}:{{ user.group }}

    - name: Set deadbeef configs
      ansible.builtin.copy:
        src: "{{ __deadbeef_config }}"
        dest: "{{ user.home }}/.config/deadbeef/{{ __deadbeef_config }}"
        owner: "{{ user.name }}"
        group: "{{ user.group }}"
        mode: '0644'
        backup: true
      loop:
        - config
        - dspconfig
      loop_control:
        loop_var: __deadbeef_config

    - name: Sync deadbeef playlists
      ansible.posix.synchronize:
        src: playlists/
        dest: "{{ user.home }}/.config/deadbeef/playlists/"
        recursive: true
        mode: push
        delete: false
        checksum: true
        perms: false
        rsync_opts:
          - "--update"
          - "--omit-dir-times"
          - --chown={{ user.name }}:{{ user.group }}

# Note: The following are example shellexec commands for reference
# - Edit audio in Audacity: audacity %F
# - Resample to 48kHz: mkdir -pv %D/converted && sox %F -r 48k %D/converted/%f
# - Normalize audio: normalize-audio -m %F
# - Edit tags in Puddletag: puddletag %D
# - Convert to mono and resample: mkdir -pv %D/converted && sox %F -r 48k %D/converted/%f channels 1
